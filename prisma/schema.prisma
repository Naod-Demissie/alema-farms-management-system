generator client {
  provider   = "prisma-client-js"
  engineType = "client"
  output     = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Staff {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  firstName        String
  lastName         String
  name             String
  email            String?         @unique
  emailVerified    Boolean         @default(false)
  image            String? @db.Text
  phoneNumber      String?
  role             StaffRole       @default(WORKER)
  isActive         Boolean         @default(true)
  isSystemUser     Boolean         @default(false)
  attendance       Attendance[]
  invitesCreated   Invite[]        @relation("InviteCreatedByStaff")
  leaveBalance     LeaveBalance?
  approvedLeaves   LeaveRequest[]  @relation("ApprovedLeaves")
  leaveRequests    LeaveRequest[]  @relation("StaffLeave")
  payrolls         Payroll[]
  accounts         Accounts[]
  feedUsageRecords FeedUsage[]     @relation("FeedUsageRecordedBy")
  mortalityRecords Mortality[]     @relation("RecordedByStaff")
  notifications    Notifications[] @relation("StaffNotifications")
  sessions         Sessions[]
  treatments       Treatments[]    @relation("TreatedByStaff")

  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@index([name, role])
  @@index([role, isActive])
  @@map("staff")
}

model Sessions {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  staff     Staff    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([expiresAt, createdAt])
  @@map("sessions")
}

model Accounts {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  staff                 Staff     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([providerId])
  @@map("accounts")
}

model Verifications {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([identifier])
  @@index([expiresAt])
  @@map("verifications")
}

model Invite {
  id          String    @id @default(uuid())
  email       String    @unique
  role        StaffRole @default(WORKER)
  token       String    @unique
  expiresAt   DateTime
  isUsed      Boolean   @default(false)
  createdById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   Staff?    @relation("InviteCreatedByStaff", fields: [createdById], references: [id])

  @@index([isUsed])
  @@index([expiresAt])
  @@index([createdById])
  @@index([isUsed, expiresAt])
  @@index([email, isUsed])
}

model Payroll {
  id         String   @id @default(uuid())
  staffId    String
  salary     Float
  bonus      Float?
  deductions Float?   @default(0)
  paidOn     DateTime
  staff      Staff    @relation(fields: [staffId], references: [id])

  @@index([staffId])
  @@index([paidOn])
  @@index([staffId, paidOn])
}

model Attendance {
  id       String           @id @default(uuid())
  staffId  String
  date     DateTime
  status   AttendanceStatus @default(ABSENT)
  checkIn  DateTime?
  checkOut DateTime?
  hours    Float?
  staff    Staff            @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
  @@index([staffId])
  @@index([date])
  @@index([status])
  @@index([staffId, date])
  @@index([date, status])
}

model LeaveRequest {
  id         String      @id @default(uuid())
  staffId    String
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  reason     String?
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approver   Staff?      @relation("ApprovedLeaves", fields: [approvedBy], references: [id])
  staff      Staff       @relation("StaffLeave", fields: [staffId], references: [id])

  @@index([staffId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([approvedBy])
  @@index([staffId, status])
  @@index([status, startDate, endDate])
}

model LeaveBalance {
  id                 String @id @default(uuid())
  staffId            String @unique
  year               Int
  totalLeaveDays     Int
  usedLeaveDays      Int    @default(0)
  remainingLeaveDays Int
  staff              Staff  @relation(fields: [staffId], references: [id])

  @@index([year])
}

model Flocks {
  id                String              @id @default(uuid())
  batchCode         String              @unique
  arrivalDate       DateTime
  initialCount      Int
  currentCount      Int
  ageInDays         Int?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  broilerProduction BroilerProduction[]
  eggProduction     EggProduction[]
  feedUsage         FeedUsage[]
  manureProduction  ManureProduction[]
  mortality         Mortality[]
  notifications     Notifications[]
  treatments        Treatments[]
  vaccinations      Vaccinations[]

  @@index([arrivalDate])
  @@index([currentCount])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([arrivalDate, currentCount])
  @@index([batchCode, createdAt])
  @@map("flocks")
}

model Vaccinations {
  id               String   @id @default(uuid())
  flockId          String
  vaccineName      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  administeredBy   String
  administeredDate DateTime
  dosage           String
  notes            String?
  quantity         Int
  status           String   @default("completed")
  flock            Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@index([flockId])
  @@index([administeredDate])
  @@index([createdAt])
  @@index([status])
  @@index([flockId, administeredDate])
  @@map("vaccinations")
}

model Treatments {
  id          String             @id @default(uuid())
  flockId     String
  disease     DiseaseClass
  medication  String?
  dosage      String?
  response    TreatmentResponse?
  treatedById String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  diseaseName String?
  duration    String?
  endDate     DateTime?
  frequency   String?
  notes       String?
  startDate   DateTime?
  symptoms    String?
  flock       Flocks             @relation(fields: [flockId], references: [id], onDelete: Cascade)
  treatedBy   Staff?             @relation("TreatedByStaff", fields: [treatedById], references: [id])

  @@index([flockId])
  @@index([treatedById])
  @@index([createdAt])
  @@index([disease])
  @@index([flockId, createdAt])
  @@index([disease, response])
  @@map("treatments")
}

model Mortality {
  id               String      @id @default(uuid())
  flockId          String
  date             DateTime
  count            Int
  cause            DeathCause?
  causeDescription String?
  recordedById     String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  flock            Flocks      @relation(fields: [flockId], references: [id], onDelete: Cascade)
  recordedBy       Staff?      @relation("RecordedByStaff", fields: [recordedById], references: [id])

  @@index([flockId])
  @@index([date])
  @@index([cause])
  @@index([recordedById])
  @@index([flockId, date])
  @@index([date, cause])
  @@map("mortality")
}

model EggProduction {
  id          String   @id @default(uuid())
  flockId     String
  date        DateTime
  totalCount  Int
  gradeCounts Json
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flock       Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@index([flockId])
  @@index([date])
  @@index([createdAt])
  @@index([flockId, date])
  @@map("egg_production")
}

model BroilerProduction {
  id        String   @id @default(uuid())
  flockId   String
  date      DateTime
  quantity  Int
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flock     Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@index([flockId])
  @@index([date])
  @@index([createdAt])
  @@index([flockId, date])
  @@map("broiler_production")
}

model ManureProduction {
  id        String   @id @default(uuid())
  flockId   String
  date      DateTime
  quantity  Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flock     Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@index([flockId])
  @@index([date])
  @@index([createdAt])
  @@index([flockId, date])
  @@map("manure_production")
}

model Expenses {
  id              String          @id @default(uuid())
  category        ExpenseCategory
  quantity        Float
  costPerQuantity Float
  amount          Float
  date            DateTime
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([category])
  @@index([date])
  @@index([createdAt])
  @@map("expenses")
}

model Revenue {
  id                String        @id @default(uuid())
  source            RevenueSource
  quantity          Float
  costPerQuantity   Float
  amount            Float
  date              DateTime
  description       String?
  transactionBy     String?
  bankName          BankName?
  bankAccountNumber String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([source])
  @@index([date])
  @@index([createdAt])
  @@map("revenue")
}

model Notifications {
  id        String   @id @default(uuid())
  staffId   String
  flockId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flock     Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)
  staff     Staff    @relation("StaffNotifications", fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId])
  @@index([flockId])
  @@index([isRead])
  @@index([createdAt])
  @@index([staffId, isRead])
  @@index([staffId, createdAt])
  @@map("notifications")
}

model FeedInventory {
  id          String        @id @default(uuid())
  feedType    FeedType
  supplierId  String?
  quantity    Float
  unit        FeedUnit      @default(KG)
  costPerUnit Float?
  totalCost   Float?
  notes       String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  supplier    FeedSupplier? @relation(fields: [supplierId], references: [id])
  feedUsage   FeedUsage[]

  @@index([feedType])
  @@index([supplierId])
  @@index([isActive])
  @@index([createdAt])
  @@index([feedType, isActive])
  @@index([supplierId, isActive])
  @@map("feed_inventory")
}

model FeedSupplier {
  id            String          @id @default(uuid())
  name          String
  contactName   String?
  phone         String?
  address       String?
  notes         String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  feedInventory FeedInventory[]

  @@index([name])
  @@index([isActive])
  @@index([createdAt])
  @@map("feed_suppliers")
}

model FeedUsage {
  id           String        @id @default(uuid())
  flockId      String
  feedId       String
  date         DateTime
  amountUsed   Float
  unit         FeedUnit      @default(KG)
  notes        String?
  recordedById String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  feed         FeedInventory @relation(fields: [feedId], references: [id])
  flock        Flocks        @relation(fields: [flockId], references: [id], onDelete: Cascade)
  recordedBy   Staff?        @relation("FeedUsageRecordedBy", fields: [recordedById], references: [id])

  @@index([flockId])
  @@index([feedId])
  @@index([date])
  @@index([recordedById])
  @@index([createdAt])
  @@index([flockId, date])
  @@index([feedId, date])
  @@map("feed_usage")
}

model FeedProgram {
  id         String   @id @default(uuid())
  ageInWeeks Int      @unique
  ageInDays  String
  feedType   FeedType
  gramPerHen Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([feedType])
  @@index([isActive])
  @@index([ageInWeeks, isActive])
  @@map("feed_program")
}

model Inventory {
  id              String        @id @default(uuid())
  type            InventoryType
  name            String
  quantity        Float
  unit            String        @default("kg")
  threshold       Float?
  feedDetails     Json?
  eggCount        Int?
  broilerCount    Int?
  manureWeight    Float?
  medicineDetails Json?
  otherDetails    Json?
  costPerUnit     Float?
  totalValue      Float?
  notes           String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([type])
  @@index([isActive])
  @@index([createdAt])
  @@map("inventory")
}

enum StaffRole {
  ADMIN
  VETERINARIAN
  WORKER
}

enum TreatmentResponse {
  improved
  no_change
  worsened
}

enum DiseaseClass {
  respiratory
  digestive
  parasitic
  nutritional
  other
}

enum DeathCause {
  disease
  injury
  environmental
  unknown
}

enum AttendanceStatus {
  ABSENT
  PRESENT
  CHECKED_IN
  CHECKED_OUT
  ON_LEAVE
}

enum FeedType {
  LAYER_STARTER
  REARING
  PULLET_FEED
  LAYER
  LAYER_PHASE_1
  CUSTOM
}

enum ExpenseCategory {
  feed
  medicine
  labor
  utilities
  maintenance
  other
}

enum RevenueSource {
  egg_sales
  bird_sales
  manure
  other
}

enum LeaveType {
  SICK
  ANNUAL
  MATERNITY
  PATERNITY
  CASUAL
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum InventoryType {
  MEDICINE
  FEED
  MANURE
  BROILER
  EGG
  OTHER
}

enum FeedUnit {
  KG
  QUINTAL
}

enum BankName {
  COMMERCIAL_BANK_OF_ETHIOPIA
  AWASH_BANK
  DASHEN_BANK
  BANK_OF_ABYSSINIA
  WEGAGEN_BANK
  NIB_INTERNATIONAL_BANK
  HIBRET_BANK
  BERHAN_BANK
  BUNNA_BANK
  ABAY_BANK
  ADDIS_BANK
  OROMIA_BANK
  LION_BANK
  ZEMEN_BANK
  ENAT_BANK
  DEBUB_GLOBAL_BANK
  SIINQEE_BANK
  AMHARA_BANK
  TSEHAY_BANK
  ZAMZAM_BANK
  HIJRA_BANK
  GOH_BETOCH_BANK
}
