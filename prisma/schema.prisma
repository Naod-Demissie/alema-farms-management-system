generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  firstName        String
  lastName         String
  name             String
  email            String? @unique
  emailVerified    Boolean         @default(false)
  image            String?
  phoneNumber      String?
  role             StaffRole       @default(WORKER)
  isActive         Boolean         @default(true)
  isSystemUser     Boolean         @default(false)
  attendance       Attendance[]
  invitesCreated   Invite[]        @relation("InviteCreatedByStaff")
  leaveBalance     LeaveBalance?
  approvedLeaves   LeaveRequest[]  @relation("ApprovedLeaves")
  leaveRequests    LeaveRequest[]  @relation("StaffLeave")
  payrolls         Payroll[]
  accounts         Accounts[]
  mortalityRecords Mortality[]     @relation("RecordedByStaff")
  notifications    Notifications[] @relation("StaffNotifications")
  sessions         Sessions[]
  treatments       Treatments[]    @relation("TreatedByStaff")
  feedUsageRecords FeedUsage[]     @relation("FeedUsageRecordedBy")

  @@map("staff")
}

model Sessions {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  staff     Staff    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Accounts {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  staff                 Staff     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verifications {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

model Invite {
  id          String    @id @default(uuid())
  email       String    @unique
  role        StaffRole @default(WORKER)
  token       String    @unique
  expiresAt   DateTime
  isUsed      Boolean   @default(false)
  createdById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   Staff?    @relation("InviteCreatedByStaff", fields: [createdById], references: [id])
}

model Payroll {
  id         String   @id @default(uuid())
  staffId    String
  salary     Float
  bonus      Float?
  deductions Float?   @default(0)
  paidOn     DateTime
  staff      Staff    @relation(fields: [staffId], references: [id])
}

model Attendance {
  id      String   @id @default(uuid())
  staffId String
  date    DateTime
  status  String
  staff   Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
}

model LeaveRequest {
  id         String      @id @default(uuid())
  staffId    String
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  reason     String?
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approver   Staff?      @relation("ApprovedLeaves", fields: [approvedBy], references: [id])
  staff      Staff       @relation("StaffLeave", fields: [staffId], references: [id])
}

model LeaveBalance {
  id                 String @id @default(uuid())
  staffId            String @unique
  year               Int
  totalLeaveDays     Int
  usedLeaveDays      Int    @default(0)
  remainingLeaveDays Int
  staff              Staff  @relation(fields: [staffId], references: [id])
}

model Flocks {
  id            String          @id @default(uuid())
  batchCode     String          @unique
  breed         BreedType
  source        SourceType
  arrivalDate   DateTime
  initialCount  Int
  currentCount  Int
  ageInDays     Int?
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  eggProduction   EggProduction[]
  broilerSales    BroilerSales[]
  manureProduction ManureProduction[]
  expenses        Expenses[]
  feedUsage       FeedUsage[]
  mortality       Mortality[]
  notifications   Notifications[]
  revenue         Revenue[]
  treatments      Treatments[]
  vaccinations    Vaccinations[]

  @@map("flocks")
}

model Vaccinations {
  id               String   @id @default(uuid())
  flockId          String
  vaccineName      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  administeredBy   String
  administeredDate DateTime
  dosage           String
  notes            String?
  quantity         Int
  status           String   @default("completed")
  flock            Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@map("vaccinations")
}

model Treatments {
  id          String             @id @default(uuid())
  flockId     String
  disease     DiseaseClass
  medication  String?
  dosage      String?
  response    TreatmentResponse?
  treatedById String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  diseaseName String?
  duration    String?
  endDate     DateTime?
  frequency   String?
  notes       String?
  startDate   DateTime?
  symptoms    String?
  flock       Flocks             @relation(fields: [flockId], references: [id], onDelete: Cascade)
  treatedBy   Staff?             @relation("TreatedByStaff", fields: [treatedById], references: [id])

  @@map("treatments")
}

model Mortality {
  id               String      @id @default(uuid())
  flockId          String
  date             DateTime
  count            Int
  cause            DeathCause?
  causeDescription String?
  recordedById     String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  flock            Flocks      @relation(fields: [flockId], references: [id], onDelete: Cascade)
  recordedBy       Staff?      @relation("RecordedByStaff", fields: [recordedById], references: [id])

  @@map("mortality")
}

model EggProduction {
  id          String   @id @default(uuid())
  flockId     String
  date        DateTime
  totalCount  Int      // Total eggs collected
  gradeCounts Json     // JSON: {normal: number, cracked: number, spoiled: number}
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flock       Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@map("egg_production")
}

model BroilerSales {
  id          String   @id @default(uuid())
  flockId     String
  date        DateTime
  quantity    Int      // Number of birds sold
  unit        String   @default("birds")
  pricePerUnit Float?  // Price per bird
  totalAmount Float?   // Total sale amount
  buyer       String?  // Buyer information
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flock       Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@map("broiler_sales")
}

model ManureProduction {
  id          String   @id @default(uuid())
  flockId     String
  date        DateTime
  quantity    Float    // Weight in kg
  unit        String   @default("kg")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flock       Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@map("manure_production")
}

model Expenses {
  id        String          @id @default(uuid())
  flockId   String
  category  ExpenseCategory
  amount    Float
  date      DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  flock     Flocks          @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Revenue {
  id        String        @id @default(uuid())
  flockId   String
  source    RevenueSource
  amount    Float
  date      DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  flock     Flocks        @relation(fields: [flockId], references: [id], onDelete: Cascade)

  @@map("revenue")
}

model Notifications {
  id        String   @id @default(uuid())
  staffId   String
  flockId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flock     Flocks   @relation(fields: [flockId], references: [id], onDelete: Cascade)
  staff     Staff    @relation("StaffNotifications", fields: [staffId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model FeedInventory {
  id          String    @id @default(uuid())
  feedType    FeedType
  supplierId  String?   // Reference to supplier
  quantity    Float     // Current stock quantity
  unit        String    @default("kg") // Unit of measurement (kg, bags, etc.)
  costPerUnit Float?    // Cost per unit
  totalCost   Float?    // Total cost (quantity * costPerUnit)
  minStock    Float?    // Minimum stock level for alerts
  notes       String?   // Additional notes
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  supplier    FeedSupplier? @relation(fields: [supplierId], references: [id])
  feedUsage   FeedUsage[]
  
  @@map("feed_inventory")
}

model FeedSupplier {
  id          String    @id @default(uuid())
  name        String
  contactName String?
  phone       String?
  address     String?
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  feedInventory FeedInventory[]
  
  @@map("feed_suppliers")
}

model FeedUsage {
  id         String    @id @default(uuid())
  flockId    String
  feedId     String
  date       DateTime
  amountUsed Float
  unit       String    @default("kg")
  notes      String?   // Additional notes
  recordedById String? // Staff who recorded the usage
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  flock      Flocks        @relation(fields: [flockId], references: [id], onDelete: Cascade)
  feed       FeedInventory @relation(fields: [feedId], references: [id])
  recordedBy Staff?        @relation("FeedUsageRecordedBy", fields: [recordedById], references: [id])
  
  @@map("feed_usage")
}

model FeedProgram {
  id          String    @id @default(uuid())
  breed       BreedType
  ageInWeeks  Int
  ageInDays   String    // e.g., "1-7", "8-14"
  feedType    FeedType
  gramPerHen  Float
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([breed, ageInWeeks])
  @@map("feed_program")
}

enum StaffRole {
  ADMIN
  VETERINARIAN
  WORKER
}

enum BreedType {
  broiler
  layer
  dual_purpose
}

enum SourceType {
  hatchery
  farm
  imported
}

enum TreatmentResponse {
  improved
  no_change
  worsened
}

enum DiseaseClass {
  respiratory
  digestive
  parasitic
  nutritional
  other
}

enum DeathCause {
  disease
  injury
  environmental
  unknown
}

enum FeedType {
  LAYER_STARTER
  REARING
  PULLET_FEED
  LAYER
  LAYER_PHASE_1
  CUSTOM
}



enum ExpenseCategory {
  feed
  medicine
  labor
  utilities
  maintenance
  other
}

enum RevenueSource {
  egg_sales
  bird_sales
  subsidy
  other
}

enum LeaveType {
  SICK
  ANNUAL
  MATERNITY
  PATERNITY
  CASUAL
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

